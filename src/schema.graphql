const typeDefs = `

type AuthPayload {
	token: String
	user: User
}

type Query {
	actors(skip: Int, take: Int, filter: String): [Actor!]!
	actor(id: ID!): Actor!
	blogs(skip: Int, take: Int, filter: String): [Blog!]!
	blog(id: ID!): Blog!
	testimonials(skip: Int, take: Int, filter: String): [Testimonial!]!
	testimonial(id: ID!): Testimonial!
	users: [User!]!
}

type Mutation {
	#user
	signup(name: String!, email: String!, password: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload
	updateUser(name: String, email: String, password: String): User!
	deleteUser: User!
	# consider refactoring arguments into Input types.
	# actor
	newActor(
		name: String!,
		 img: String!, 
		 alt: String, 
		 imdb: String, 
		 bio: String! 
		 ): Actor!
		 
	updateActor(
		oldName: String!
		name: String
		img: String
		alt: String
		imdb: String
		bio: String
	): Actor!

	deleteActor(name: String! ): Actor!
	deleteActors: Int

	#blog
	newBlog(
		date: String!
		title: String!,
		body: String!,
	): Blog!

	updateBlog(
		date: String
		title: String!
		body: String
	): Blog!

	deleteBlog(
		title: String!
	): Blog!

	#testimonial
	newTestimonial(
		name: String!,
		occupation: String,
		testimonial: String!
		): Testimonial!

	updateTestimonial(
		oldName: String!,
		name: String,
		occupation: String,
		testimonial: String
	): Testimonial!

	deleteTestimonial( name: String!): Testimonial!
}

type User {
	id: ID!
	name: String!
	email: String!

	testimonials: [Testimonial!]!
	actors: [Actor!]!
	blogs: [Blog!]!
}

type Actor {
	id: ID!
	name: String!
	img: String!
	alt: String
	imdb: String
	bio: String!

	postedBy: User
}

type Blog {
	id: ID!
	date: String!
	title: String!
	body: String!

	postedBy: User
}

type Testimonial {
	id: ID!
	name: String!
	occupation: String
	testimonial: String!

	postedBy: User
}
`

module.exports = {
	typeDefs,
}